library(purrr)
library(sp)
library(tibble)
#| output: false
#| warnings: false
#| messages: false
library(dplyr)
library(terra)
library(readxl)
library(kableExtra)
library(purrr)
library(sp)
library(tibble)
#| warning: false
#| message: false
library(terra)
library(ncdf4)
library(dplyr)
library(tidyr)
checkdir<-function(dataset1) {
if (dir.exists(paste0("../data_reanalysis/",dataset1)) == FALSE) {
dir.create(paste0("../data_reanalysis/", dataset1), showWarnings = FALSE)
print(paste0("created directory", "./data_reanalysis/",dataset1))
}else{print(paste0("directory", "./data_reanalysis/",dataset1, " already exists"))}
}
download_chelsa<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
if (file.exists(destfile) == FALSE) {
print(paste0("downloading ", dataset$filename[i]))
download.file(dataset$link[i], destfile = destfile, method = "curl")
ras <- terra::rast(destfile)
ras <- terra::crop(ras, extentMap)
writeRaster(ras, filename = destfile, overwrite = TRUE)
}else{
print(paste0("file ", dataset$filename[i], " already exists"))
}
}
}
download_chelsa2<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
if (file.exists(destfile) == FALSE) {
print(paste0("downloading ", dataset$filename[i]))
download.file(dataset$link[i], destfile = destfile, method = "curl")
ras <- terra::rast(destfile)
ras <- terra::crop(ras, extentMap)
ras <- terra::app(ras, fun = function(x) { x * 0.1 })
writeRaster(ras, filename = destfile, overwrite = TRUE)
}else{
print(paste0("file ", dataset$filename[i], " already exists"))
}
}
}
download_chp<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
destfile2<- gsub(".gz","",destfile)
if (file.exists(destfile2) == FALSE) {
download.file(dataset$link[i], destfile = destfile, method = "curl")
R.utils::gunzip(destfile, remove = TRUE)
destfile=gsub(".gz","",destfile)
ras <- terra::rast(destfile)
ras <- terra::crop(ras, extentMap)
writeRaster(ras, filename = destfile, overwrite = TRUE)
}else {
print(paste0(destfile2, " already exists"))
}
}
}
download_terra<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
if (file.exists(paste0(destfile,"_1.tif")) == FALSE) {
download.file(dataset$link[i], destfile = destfile, method = "curl")
ras <- terra::rast(destfile)
ras <- terra::crop(ras, extentMap)
Sys.sleep(1)
for (t in 1:nlayers(ras)) {
writeRaster(ras[[t]], filename = paste0(destfile,"_",t, ".tif"), overwrite = TRUE)
}
unlink(destfile)
}else {
print(paste0(destfile, " already exists"))
}
}
}
download_pbcor<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
if (file.exists(destfile) == FALSE) {
download.file(dataset$link[i], destfile = destfile, method = "libcurl")
unzip(destfile, exdir = dirname(destfile))
data<-list.files(dirname(destfile),pattern = ".nc")
raschelsa<- terra::rast(paste0(dirname(destfile),"/",data[1]))
raschelsa<- terra::crop(raschelsa, extentMap)
for (t in 1:nlayers(raschelsa)) {
print("writting")
writeRaster(raschelsa[[t]], filename = paste0("../data_reanalysis/","_",t, ".tif"), overwrite = TRUE)
}
raschp<- terra::rast(paste0(dirname(destfile),"/",data[2]))
raschp<- terra::crop(raschp, extentMap)
for (t in 1:nlayers(raschp)) {
print("writting")
writeRaster(raschp[[t]], filename = paste0(destfile,"_",t, ".tif"), overwrite = TRUE)
}
rasworl<- terra::rast(paste0(dirname(destfile),"/",data[3]))
rasworl<- terra::crop(rasworl, extentMap)
for (t in 1:nlayers(rasworl)) {
print("writting")
writeRaster(rasworl[[t]], filename = paste0(destfile,"_",t, ".tif"), overwrite = TRUE)
}
unlink(paste0(dirname(destfile),"/",data[1]))
unlink(paste0(dirname(destfile),"/",data[2]))
unlink(paste0(dirname(destfile),"/",data[3]))
unlink(paste0(dirname(destfile),"/","readme.txt"))
unlink(destfile)
}else {
print(paste0(destfile, " already exists"))
}
}
}
#| output: false
#CHELSA 1.2 climatology
dataset_chelsa1 <- links %>% filter(source == "CHELSA 1.2" & type == "climatology")
checkdir(dataset_chelsa1$source[1])
download_chelsa(dataset_chelsa1)
#CHELSA 2.1 climatology
dataset_chelsa2 <- links %>% filter(source == "CHELSA 2.1" & type == "climatology")
checkdir(dataset_chelsa2$source[1])
download_chelsa2(dataset_chelsa2)
#CHIRPS 2.0 timeseries
dataset_chirps <- links %>% filter(source == "CHIRPS 2.0" & type == "timeseries")
checkdir(dataset_chirps$source[1])
download_chp(dataset_chirps)
#CHPclim climatology
dataset_chpclim <- links %>% filter(source == "CHPclim" & type == "climatology")
checkdir(dataset_chpclim$source[1])
download_chp(dataset_chpclim)
#TerraClimate climatology
dataset_terra <- links %>% filter(source == "TerraClimate" & type == "climatology")
checkdir(dataset_terra$source[1])
download_terra(dataset_terra)
#| output: false
#CHELSA 1.2 climatology
dataset_chelsa1 <- links %>% filter(source == "CHELSA 1.2" & type == "climatology")
checkdir(dataset_chelsa1$source[1])
download_chelsa(dataset_chelsa1)
#CHELSA 2.1 climatology
dataset_chelsa2 <- links %>% filter(source == "CHELSA 2.1" & type == "climatology")
checkdir(dataset_chelsa2$source[1])
download_chelsa2(dataset_chelsa2)
#CHIRPS 2.0 timeseries
dataset_chirps <- links %>% filter(source == "CHIRPS 2.0" & type == "timeseries")
checkdir(dataset_chirps$source[1])
download_chp(dataset_chirps)
#CHPclim climatology
dataset_chpclim <- links %>% filter(source == "CHPclim" & type == "climatology")
checkdir(dataset_chpclim$source[1])
download_chp(dataset_chpclim)
#TerraClimate climatology
dataset_terra <- links %>% filter(source == "TerraClimate" & type == "climatology")
checkdir(dataset_terra$source[1])
download_terra(dataset_terra)
#| output: false
#CHELSA 1.2 climatology
dataset_chelsa1 <- links %>% filter(source == "CHELSA 1.2" & type == "climatology")
checkdir(dataset_chelsa1$source[1])
download_chelsa(dataset_chelsa1)
#CHELSA 2.1 climatology
dataset_chelsa2 <- links %>% filter(source == "CHELSA 2.1" & type == "climatology")
checkdir(dataset_chelsa2$source[1])
download_chelsa2(dataset_chelsa2)
#CHIRPS 2.0 timeseries
dataset_chirps <- links %>% filter(source == "CHIRPS 2.0" & type == "timeseries")
checkdir(dataset_chirps$source[1])
download_chp(dataset_chirps)
#CHPclim climatology
dataset_chpclim <- links %>% filter(source == "CHPclim" & type == "climatology")
checkdir(dataset_chpclim$source[1])
download_chp(dataset_chpclim)
#TerraClimate climatology
dataset_terra <- links %>% filter(source == "TerraClimate" & type == "climatology")
checkdir(dataset_terra$source[1])
download_terra(dataset_terra)
checkdir<-function(dataset1) {
if (dir.exists(paste0("../data_reanalysis/",dataset1)) == FALSE) {
dir.create(paste0("../data_reanalysis/", dataset1), showWarnings = FALSE)
print(paste0("created directory", "./data_reanalysis/",dataset1))
}else{print(paste0("directory", "./data_reanalysis/",dataset1, " already exists"))}
}
download_chelsa<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
if (file.exists(destfile) == FALSE) {
print(paste0("downloading ", dataset$filename[i]))
download.file(dataset$link[i], destfile = destfile, method = "curl")
ras <- terra::rast(destfile)
ras <- terra::crop(ras, extentMap)
writeRaster(ras, filename = destfile, overwrite = TRUE)
}else{
print(paste0("file ", dataset$filename[i], " already exists"))
}
}
}
download_chelsa2<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
if (file.exists(destfile) == FALSE) {
print(paste0("downloading ", dataset$filename[i]))
download.file(dataset$link[i], destfile = destfile, method = "curl")
ras <- terra::rast(destfile)
ras <- terra::crop(ras, extentMap)
ras <- terra::app(ras, fun = function(x) { x * 0.1 })
writeRaster(ras, filename = destfile, overwrite = TRUE)
}else{
print(paste0("file ", dataset$filename[i], " already exists"))
}
}
}
download_chp<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
destfile2<- gsub(".gz","",destfile)
if (file.exists(destfile2) == FALSE) {
download.file(dataset$link[i], destfile = destfile, method = "curl")
R.utils::gunzip(destfile, remove = TRUE)
destfile=gsub(".gz","",destfile)
ras <- terra::rast(destfile)
ras <- terra::crop(ras, extentMap)
writeRaster(ras, filename = destfile, overwrite = TRUE)
}else {
print(paste0(destfile2, " already exists"))
}
}
}
download_terra<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
if (file.exists(paste0(destfile,"_1.tif")) == FALSE) {
download.file(dataset$link[i], destfile = destfile, method = "curl")
ras <- terra::rast(destfile)
ras <- terra::crop(ras, extentMap)
Sys.sleep(1)
for (t in 1:nlyr(ras)) {
writeRaster(ras[[t]], filename = paste0(destfile,"_",t, ".tif"), overwrite = TRUE)
}
unlink(destfile)
}else {
print(paste0(destfile, " already exists"))
}
}
}
download_pbcor<-function(dataset){
for (i in 1:nrow(dataset)) {
destfile <- paste0("../data_reanalysis/", dataset$source[i], "/", dataset$filename[i])
if (file.exists(destfile) == FALSE) {
download.file(dataset$link[i], destfile = destfile, method = "libcurl")
unzip(destfile, exdir = dirname(destfile))
data<-list.files(dirname(destfile),pattern = ".nc")
raschelsa<- terra::rast(paste0(dirname(destfile),"/",data[1]))
raschelsa<- terra::crop(raschelsa, extentMap)
for (t in 1:nlyr(raschelsa)) {
print("writting")
writeRaster(raschelsa[[t]], filename = paste0("../data_reanalysis/","_",t, ".tif"), overwrite = TRUE)
}
raschp<- terra::rast(paste0(dirname(destfile),"/",data[2]))
raschp<- terra::crop(raschp, extentMap)
for (t in 1:nlyr(raschp)) {
print("writting")
writeRaster(raschp[[t]], filename = paste0(destfile,"_",t, ".tif"), overwrite = TRUE)
}
rasworl<- terra::rast(paste0(dirname(destfile),"/",data[3]))
rasworl<- terra::crop(rasworl, extentMap)
for (t in 1:nlyr(rasworl)) {
print("writting")
writeRaster(rasworl[[t]], filename = paste0(destfile,"_",t, ".tif"), overwrite = TRUE)
}
unlink(paste0(dirname(destfile),"/",data[1]))
unlink(paste0(dirname(destfile),"/",data[2]))
unlink(paste0(dirname(destfile),"/",data[3]))
unlink(paste0(dirname(destfile),"/","readme.txt"))
unlink(destfile)
}else {
print(paste0(destfile, " already exists"))
}
}
}
#| output: false
#CHELSA 1.2 climatology
dataset_chelsa1 <- links %>% filter(source == "CHELSA 1.2" & type == "climatology")
checkdir(dataset_chelsa1$source[1])
download_chelsa(dataset_chelsa1)
#CHELSA 2.1 climatology
dataset_chelsa2 <- links %>% filter(source == "CHELSA 2.1" & type == "climatology")
checkdir(dataset_chelsa2$source[1])
download_chelsa2(dataset_chelsa2)
#CHIRPS 2.0 timeseries
dataset_chirps <- links %>% filter(source == "CHIRPS 2.0" & type == "timeseries")
checkdir(dataset_chirps$source[1])
download_chp(dataset_chirps)
#CHPclim climatology
dataset_chpclim <- links %>% filter(source == "CHPclim" & type == "climatology")
checkdir(dataset_chpclim$source[1])
download_chp(dataset_chpclim)
#TerraClimate climatology
dataset_terra <- links %>% filter(source == "TerraClimate" & type == "climatology")
checkdir(dataset_terra$source[1])
download_terra(dataset_terra)
dir.create("../data_reanalysis", showWarnings = FALSE)
extentMap  <- terra::ext(c(-80.2,-79.4, 8.8, 9.5))
options(download.file.method = "curl")
options(timeout = 1080000)
links<-read.csv("../tables/reanalysis_links.csv", header = TRUE, sep = ",")
#| output: false
#CHELSA 1.2 climatology
dataset_chelsa1 <- links %>% filter(source == "CHELSA 1.2" & type == "climatology")
checkdir(dataset_chelsa1$source[1])
download_chelsa(dataset_chelsa1)
#CHELSA 2.1 climatology
dataset_chelsa2 <- links %>% filter(source == "CHELSA 2.1" & type == "climatology")
checkdir(dataset_chelsa2$source[1])
download_chelsa2(dataset_chelsa2)
#CHIRPS 2.0 timeseries
dataset_chirps <- links %>% filter(source == "CHIRPS 2.0" & type == "timeseries")
checkdir(dataset_chirps$source[1])
download_chp(dataset_chirps)
#CHPclim climatology
dataset_chpclim <- links %>% filter(source == "CHPclim" & type == "climatology")
checkdir(dataset_chpclim$source[1])
download_chp(dataset_chpclim)
#TerraClimate climatology
dataset_terra <- links %>% filter(source == "TerraClimate" & type == "climatology")
checkdir(dataset_terra$source[1])
download_terra(dataset_terra)
#| output: false
#CHELSA 1.2 climatology
dataset_chelsa1 <- links %>% filter(source == "CHELSA 1.2" & type == "climatology")
checkdir(dataset_chelsa1$source[1])
download_chelsa(dataset_chelsa1)
#CHELSA 2.1 climatology
dataset_chelsa2 <- links %>% filter(source == "CHELSA 2.1" & type == "climatology")
checkdir(dataset_chelsa2$source[1])
download_chelsa2(dataset_chelsa2)
#CHIRPS 2.0 timeseries
dataset_chirps <- links %>% filter(source == "CHIRPS 2.0" & type == "timeseries")
checkdir(dataset_chirps$source[1])
download_chp(dataset_chirps)
#CHPclim climatology
dataset_chpclim <- links %>% filter(source == "CHPclim" & type == "climatology")
checkdir(dataset_chpclim$source[1])
download_chp(dataset_chpclim)
#TerraClimate climatology
dataset_terra <- links %>% filter(source == "TerraClimate" & type == "climatology")
checkdir(dataset_terra$source[1])
download_terra(dataset_terra)
#| output: false
files<- list.files("../data_reanalysis/TerraClimate/monthly",pattern = ".tif",full.names = TRUE)
year<- numeric(length(files))
month<- numeric(length(files))
for (i in 1:length(files)) {
file_parts <- unlist(strsplit(basename(files[i]), "_"))
year[i] <- as.numeric(substring(file_parts[3],1,4))
month[i] <- as.numeric(gsub(".tif", "", file_parts[4]))
}
if (file.exists("../data_reanalysis/TerraClimate/yearly")==FALSE){
dir.create("../data_reanalysis/TerraClimate/yearly", showWarnings = FALSE)
for (y in unique(year)){
print(paste0("Processing ", y))
ras <- terra::rast(files[year == y])
print(paste0("Stacked ", y))
ras <- terra::app(ras, sum)
print(paste0("Calculated ", y))
output_file <- paste0("../data_reanalysis/TerraClimate/yearly/TerraClimate_", y, ".tif")
terra::writeRaster(ras, filename = output_file, overwrite = TRUE)
}
}else{
print("Yearly timeseries already processed")
}
#| output: false
#CHELSA 1.2 climatology
dataset_chelsa1 <- links %>% filter(source == "CHELSA 1.2" & type == "climatology")
checkdir(dataset_chelsa1$source[1])
download_chelsa(dataset_chelsa1)
#CHELSA 2.1 climatology
dataset_chelsa2 <- links %>% filter(source == "CHELSA 2.1" & type == "climatology")
checkdir(dataset_chelsa2$source[1])
download_chelsa2(dataset_chelsa2)
#CHIRPS 2.0 timeseries
dataset_chirps <- links %>% filter(source == "CHIRPS 2.0" & type == "timeseries")
checkdir(dataset_chirps$source[1])
download_chp(dataset_chirps)
#CHPclim climatology
dataset_chpclim <- links %>% filter(source == "CHPclim" & type == "climatology")
checkdir(dataset_chpclim$source[1])
download_chp(dataset_chpclim)
#TerraClimate climatology
dataset_terra <- links %>% filter(source == "TerraClimate" & type == "climatology")
checkdir(dataset_terra$source[1])
download_terra(dataset_terra)
#|warnings= false
#|output= false
month <- read.csv("../tables/monthly_ground.csv")
sites <- read.csv("../tables/dfprecip.csv")
#Filter data based on conditions
acp38 <- month %>%
filter(site %in% c("AGUACLARA", "SANMIGUEL", "BCI", "PELUCA", "BCICLEAR", "GUACHA", "CASCADAS", "PEDROMIGUEL", "GAMBOA") &
Year >= 1970 & Year <= 2016) %>%
mutate(monthlyPrecip = as.numeric(monthlyPrecip))
acp38_full_extent <- acp38 %>%
group_by(site, Month) %>%
summarise(mon_mean = mean(monthlyPrecip, na.rm = TRUE)) %>%
mutate(temporal = "1970-2016", dataset_name = "Ground")
# Calculate climatology of the ground data for every specific temporal extent
acp38_ag <- lapply(datasets_info, function(dataset) {
acp38 %>%
filter(Year >= dataset$start_year & Year <= dataset$end_year) %>%
group_by(site, Month) %>%
summarise(mon_mean = mean(monthlyPrecip, na.rm = TRUE)) %>%
mutate(temporal = dataset$temporal, dataset_name = dataset$dataset_name)
}) %>% bind_rows()
# Combine the two data frames
acp38_ag <- bind_rows(acp38_ag, acp38_full_extent)
#calculate climatology of the ground data  for every specific temporal extent
# Match lat and long
acp38_ag$long_dd <- sites$long_dd[match(acp38_ag$site, sites$site)]
acp38_ag$lat_dd <- sites$lat_dd[match(acp38_ag$site, sites$site)]
## loop for extraction of values of raster reanalyis climatologies for specific sites and month.
for (i in 1:length(datasets_info)) {
files_list <- list.files(datasets_info[[i]]$path, pattern = "\\.tif$", full.names = TRUE)
raster_stack <- terra::rast(files_list)
acp38_ag[[datasets_info[[i]]$column_name]] <- NA
for (j in 1:12) {
acp38_ag[acp38_ag$Month == j, datasets_info[[i]]$column_name] <- extract_land(raster_stack[[j]], acp38_ag[acp38_ag$Month == j, c("long_dd", "lat_dd")])
}
}
write.csv(acp38_ag,"../tables/acp38_ag.csv")
#|warnings: false
#|output: false
month <- read.csv("../tables/monthly_ground.csv")
sites <- read.csv("../tables/dfprecip.csv")
#Filter data based on conditions
acp38 <- month %>%
filter(site %in% c("AGUACLARA", "SANMIGUEL", "BCI", "PELUCA", "BCICLEAR", "GUACHA", "CASCADAS", "PEDROMIGUEL", "GAMBOA") &
Year >= 1970 & Year <= 2016) %>%
mutate(monthlyPrecip = as.numeric(monthlyPrecip))
acp38_full_extent <- acp38 %>%
group_by(site, Month) %>%
summarise(mon_mean = mean(monthlyPrecip, na.rm = TRUE)) %>%
mutate(temporal = "1970-2016", dataset_name = "Ground")
# Calculate climatology of the ground data for every specific temporal extent
acp38_ag <- lapply(datasets_info, function(dataset) {
acp38 %>%
filter(Year >= dataset$start_year & Year <= dataset$end_year) %>%
group_by(site, Month) %>%
summarise(mon_mean = mean(monthlyPrecip, na.rm = TRUE)) %>%
mutate(temporal = dataset$temporal, dataset_name = dataset$dataset_name)
}) %>% bind_rows()
# Combine the two data frames
acp38_ag <- bind_rows(acp38_ag, acp38_full_extent)
#calculate climatology of the ground data  for every specific temporal extent
# Match lat and long
acp38_ag$long_dd <- sites$long_dd[match(acp38_ag$site, sites$site)]
acp38_ag$lat_dd <- sites$lat_dd[match(acp38_ag$site, sites$site)]
## loop for extraction of values of raster reanalyis climatologies for specific sites and month.
for (i in 1:length(datasets_info)) {
files_list <- list.files(datasets_info[[i]]$path, pattern = "\\.tif$", full.names = TRUE)
raster_stack <- terra::rast(files_list)
acp38_ag[[datasets_info[[i]]$column_name]] <- NA
for (j in 1:12) {
acp38_ag[acp38_ag$Month == j, datasets_info[[i]]$column_name] <- extract_land(raster_stack[[j]], acp38_ag[acp38_ag$Month == j, c("long_dd", "lat_dd")])
}
}
write.csv(acp38_ag,"../tables/acp38_ag.csv")
#| warning= false
#| message= false
#| results= "hide"
month <- read.csv("../tables/monthly_ground.csv")
sites <- read.csv("../tables/dfprecip.csv")
#Filter data based on conditions
acp38 <- month %>%
filter(site %in% c("AGUACLARA", "SANMIGUEL", "BCI", "PELUCA", "BCICLEAR", "GUACHA", "CASCADAS", "PEDROMIGUEL", "GAMBOA") &
Year >= 1970 & Year <= 2016) %>%
mutate(monthlyPrecip = as.numeric(monthlyPrecip))
acp38_full_extent <- acp38 %>%
group_by(site, Month) %>%
summarise(mon_mean = mean(monthlyPrecip, na.rm = TRUE)) %>%
mutate(temporal = "1970-2016", dataset_name = "Ground")
# Calculate climatology of the ground data for every specific temporal extent
acp38_ag <- lapply(datasets_info, function(dataset) {
acp38 %>%
filter(Year >= dataset$start_year & Year <= dataset$end_year) %>%
group_by(site, Month) %>%
summarise(mon_mean = mean(monthlyPrecip, na.rm = TRUE)) %>%
mutate(temporal = dataset$temporal, dataset_name = dataset$dataset_name)
}) %>% bind_rows()
# Combine the two data frames
acp38_ag <- bind_rows(acp38_ag, acp38_full_extent)
#calculate climatology of the ground data  for every specific temporal extent
# Match lat and long
acp38_ag$long_dd <- sites$long_dd[match(acp38_ag$site, sites$site)]
acp38_ag$lat_dd <- sites$lat_dd[match(acp38_ag$site, sites$site)]
## loop for extraction of values of raster reanalyis climatologies for specific sites and month.
for (i in 1:length(datasets_info)) {
files_list <- list.files(datasets_info[[i]]$path, pattern = "\\.tif$", full.names = TRUE)
raster_stack <- terra::rast(files_list)
acp38_ag[[datasets_info[[i]]$column_name]] <- NA
for (j in 1:12) {
acp38_ag[acp38_ag$Month == j, datasets_info[[i]]$column_name] <- extract_land(raster_stack[[j]], acp38_ag[acp38_ag$Month == j, c("long_dd", "lat_dd")])
}
}
write.csv(acp38_ag,"../tables/acp38_ag.csv")
